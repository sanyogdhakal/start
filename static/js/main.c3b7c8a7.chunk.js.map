{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","placeholder","div","class","onClick","toggleMode","htmlfor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","heading","value","onChange","event","target","rows","newText","toUpperCase","console","log","toLowerCase","joinedWords","split","reverse","join","length","Alert","alert","data-bs-dismiss","App","Mode","_useState3","_useState4","title","_readOnlyError","showAlert","message","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.c3b7c8a7.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import {Link}    from 'react-router-dom';\r\nexport default function Navbar(props ) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg ${props.mode} bg ${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">TextUtils</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"home\">Home</Link> */}\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n        </li> */}\r\n        \r\n        \r\n       </ul>\r\n      <form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form>\r\n      <div div class=\"form-check form-switch\">\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\"> Enable DarkMode</label> </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n\r\n  )\r\n}\r\nNavbar.propTypes= {\r\n  title: PropTypes.string,\r\n  aboutText:PropTypes.string,\r\n}\r\n","import React,{useState} from 'react'\r\nexport default function TextForm(props) {\r\n  const handleUpClick= ()=>{\r\n    // console.log(\"UpperCase was clicked\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n  }\r\n  const handleLoClick= ()=>{\r\n    console.log(\"LowerCase was clicked\" + text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n  }\r\n  const handleClearClick = ()=>{\r\n    let newText=\"\";\r\n    setText(newText)\r\n  }\r\n  const handleReverseClick = ()=>{\r\n    let splitWord = text.split(\"\");\r\n\r\n    let reverseWord = splitWord.reverse(\"\");\r\n    let joinedWords = reverseWord.join(\"\");\r\n    let newText = joinedWords\r\n\r\n    setText(newText);\r\n  }\r\n  const handleOnChange= (event)=>{\r\n    // console.log(\"UpperCase was change\");\r\n    setText(event.target.value);\r\n  }\r\n  \r\n \r\n\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <>\r\n    <div className=\"container\">\r\n      <h1>{props.heading}  </h1>\r\n   <div className=\"mb-3\">\r\n    \r\n     <textarea class=\"form-control\"value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n   </div>\r\n   <button class=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to uppercase</button>\r\n   <button class=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to lowercase</button>\r\n   <button class=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n   <button class=\"btn btn-primary mx-2\" onClick={handleReverseClick}>Reverse Text</button>\r\n    </div>\r\n    <div className=\"container my-3\r\n    \">\r\n      <h1>Your text summery</h1>\r\n      <p>{text.split(/[^\\s]+/).length-1} words and {text.length}  characters</p>\r\n      <p>{0.08 * text.split(/[^\\s]+/).length-1}\r\n      </p>\r\n      <p>{0.088* text.split (\"\").length}Minutes read</p>\r\n      <h2>Prewiew</h2>\r\n      <p>{text}</p>\r\n    </div>\r\n    </>\r\n  )\r\n} \r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  return (\r\n    <div>\r\n        <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n         {props.alert}\r\n  {<button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>  }\r\n</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert","// import logo from './logo.svg';\nimport { useState } from 'react';\nimport './App.css';\n// import About from './Components/About';\n import Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport Alert from './Components/Alert';\nimport React from 'react';\nimport {\n     \n//   BrowserRouter as Router,\n  \n//   Route,\n//   Routes,\n// link,\n } from \"react-router-dom\";\n\nfunction App() {\n  const [Mode, setMode] = useState('light');//Whether Dark Mode is enabled or not\n  const [alert, setalert] = useState(null)\n  const showalert = (message,type) =>{\n\n  }\n   const toggleMode=()=>{\n  if (Mode === \"light\") {\n    setMode = (\"dark\");\n  }\n  else {\n    setMode = (\"light\");\n  }\n}\n  return (\n  \n    <>\n    {/* <Router> */}\n    <Navbar title=\"TextUtils\" mode={Mode} toggleMode={toggleMode}/>\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n      \n\n               \n           {/* <Routes> */}\n             {/* <Route exact path=\"/about\" element={<About/>} > */}\n\n             {/* </Route> */}\n\n             {/* <Route exact path=\"/home\" */}\n             {/* element=  */}\n             {<TextForm showAlert={showalert} heading=\"Enter your text to Analyse below\" mode={Mode}/>}\n\n          {/* //   </Route>\n          // </Routes> */}\n\n\n      </div>\n\n\n      {/* // </Router> */}\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}